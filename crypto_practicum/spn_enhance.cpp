#include <cstdio>
#include <cstring>

// 每次处理16字节数据
#define KEYLEN 16
// 128bit数据
typedef unsigned char bit128[16];

// S盒
unsigned long long s_box[256] = {0xee, 0xe4, 0xed, 0xe1, 0xe2, 0xef, 0xeb, 0xe8, 0x3e, 0x34, 0x3d, 0x31, 0x32, 0x3f, 0x3b, 0x38, 0x4e, 0x44, 0xf3, 0x41, 0x42, 0x4f, 0x4b, 0x48, 0xae, 0xa4, 0xad, 0xa1, 0xa2, 0xaf, 0x55, 0xa8, 0xde, 0xd4, 0xdd, 0xd1, 0xd2, 0xdf, 0xdb, 0xd8, 0x6e, 0x64, 0x6d, 0x61, 0x62, 0x6f, 0x9a, 0x68, 0x1e, 0x14, 0x1d, 0x11, 0x12, 0x1f, 0x1b, 0x18, 0xce, 0xc4, 0xcd, 0xc1, 0xc2, 0xcf, 0xcb, 0xc8, 0xc5, 0xc9, 0xc0, 0xc7, 0x22, 0xab, 0x2b, 0x28, 0x5e, 0x54, 0x6b, 0x51, 0x52, 0x5f, 0x5b, 0x58, 0xfe, 0xf4, 0xfd, 0xf1, 0xf2, 0xff, 0xfb, 0xf8, 0x9e, 0x94, 0x9d, 0x91, 0x92, 0x9f, 0x9b, 0x98, 0xbe, 0xb4, 0xbd, 0xb1, 0xb2, 0xbf, 0xbb, 0xb8, 0x0e, 0x04, 0x0d, 0x01, 0x02, 0x0f, 0x0b, 0x08, 0x8e, 0x84, 0x8d, 0x81, 0x82, 0x8f, 0x5d, 0x88, 0x7e, 0x74, 0x7d, 0x71, 0x72, 0x7f, 0x7b, 0x78, 0xe3, 0xea, 0xe6, 0xec, 0xe5, 0xe9, 0xe0, 0xe7, 0x33, 0x3a, 0x36, 0x3c, 0x35, 0x39, 0x30, 0x37, 0x43, 0x4a, 0x46, 0x4c, 0x45, 0x49, 0x40, 0x47, 0xa3, 0xaa, 0xa6, 0xac, 0xa5, 0xa9, 0xa0, 0xa7, 0xd3, 0xda, 0x2f, 0xdc, 0x4d, 0xd9, 0xd0, 0xd7, 0x63, 0x6a, 0x66, 0x6c, 0x65, 0x69, 0x60, 0x67, 0x13, 0x1a, 0x16, 0x1c, 0x15, 0x19, 0x10, 0x17, 0xc3, 0xca, 0xc6, 0xcc, 0x2e, 0x24, 0x2d, 0x21, 0x23, 0x2a, 0x26, 0x2c, 0x25, 0x29, 0x20, 0x27, 0x53, 0x5a, 0x56, 0x5c, 0xf9, 0x59, 0x50, 0x57, 0xd5, 0xfa, 0xf6, 0xfc, 0xf5, 0xd6, 0xf0, 0xf7, 0x93, 0x8b, 0x96, 0x9c, 0x95, 0x99, 0x90, 0x97, 0xb3, 0xba, 0xb6, 0xbc, 0xb5, 0xb9, 0xb0, 0xb7, 0x03, 0x0a, 0x06, 0x0c, 0x05, 0x09, 0x00, 0x07, 0x83, 0x8a, 0x86, 0x8c, 0x85, 0x89, 0x80, 0x87, 0x73, 0x7a, 0x76, 0x7c, 0x75, 0x79, 0x70, 0x77};
// P盒
unsigned char p_box[64] = {1, 17, 33, 49, 2, 18, 34, 50, 3, 19, 35, 51, 4, 20, 36, 52, 5, 21, 37, 53, 6, 22, 38, 54, 15, 31, 47, 63, 16, 32, 48, 64, 9, 25, 41, 57, 10, 26, 42, 58, 11, 27, 43, 59, 12, 28, 44, 60, 13, 29, 45, 61, 14, 30, 46, 62, 7, 23, 39, 55, 8, 24, 40, 56,};

// 加密
unsigned long long encrypt(unsigned long long roundKey[], unsigned long long plain);

int main(int argc, char **argv)
{
    bit128 key = {0};
    unsigned long long plain = 0;
    unsigned long long cipher = 0x2ab1c3272de1f9a7;
    // 读取128bit秘钥
    int read_len;
    int write_len;
    read_len = fread(key, 1, KEYLEN, stdin);

    // 轮秘钥
    unsigned long long roundKey[5] = {0};
    roundKey[0] = (((unsigned long long)key[0]) << 56) | (((unsigned long long)key[1]) << 48) | (((unsigned long long)key[2]) << 40) | (((unsigned long long)key[3]) << 32) |
                  (((unsigned long long)key[4]) << 24) | (((unsigned long long)key[5]) << 16) | (((unsigned long long)key[6]) << 8) | (((unsigned long long)key[7]));
    roundKey[4] = (((unsigned long long)key[8]) << 56) | (((unsigned long long)key[9]) << 48) | (((unsigned long long)key[10]) << 40) | (((unsigned long long)key[11]) << 32) |
                  (((unsigned long long)key[12]) << 24) | (((unsigned long long)key[13]) << 16) | (((unsigned long long)key[14]) << 8) | (((unsigned long long)key[15]));
    roundKey[1] = ((roundKey[0] << 16) & 0xFFFFFFFFFFFF0000) | ((roundKey[4] >> 48) & 0x000000000000FFFF);
    roundKey[2] = ((roundKey[0] << 32) & 0xFFFFFFFF00000000) | ((roundKey[4] >> 32) & 0x00000000FFFFFFFF);
    roundKey[3] = ((roundKey[0] << 48) & 0xFFFF000000000000) | ((roundKey[4] >> 16) & 0x0000FFFFFFFFFFFF);

    // 加密模式
    for (int i = 0; i < (1 << 21); i++)
    {
        read_len = fread(&plain, 8, 1, stdin);
        // 与上一轮加密结果异或
        plain = plain ^ cipher;
        cipher = encrypt(roundKey, plain);
        write_len = fwrite(&cipher, 8, 1, stdout);
    }
    return 0;
}

unsigned long long encrypt(unsigned long long roundKey[], unsigned long long plain)
{
    for (int i = 0; i < 4; i++)
    {
        // 异或轮秘钥
        plain = plain ^ roundKey[i];

        // S盒代换
        plain = (s_box[(plain >> 56) & 0xFF] << 56) |
                (s_box[(plain >> 48) & 0xFF] << 48) |
                (s_box[(plain >> 40) & 0xFF] << 40) |
                (s_box[(plain >> 32) & 0xFF] << 32) |
                (s_box[(plain >> 24) & 0xFF] << 24) |
                (s_box[(plain >> 16) & 0xFF] << 16) |
                (s_box[(plain >> 8) & 0xFF] << 8) |
                (s_box[(plain) & 0xFF]);

        // P盒置换
        if (i < 3)
        {
            unsigned long long tmp = 0;
            for (int j = 0; j < 64; j++)
            {
                tmp = tmp | ((plain >> (64 - p_box[j])) & 0x1) << (63 - j);
            }
            plain = tmp;
        }
    }

    // 异或最后一轮轮秘钥
    unsigned long long cipher = plain ^ roundKey[4];

    return cipher;
}